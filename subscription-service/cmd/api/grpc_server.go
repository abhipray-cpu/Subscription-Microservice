// Package main defines the server component of the subscription service.
package main

import (
	"context" // Import context to manage request-scoped values, cancelation signals, and deadlines.
	"fmt"     // Import fmt for logging errors.

	"subscription-service/grpc/pb"         // Import pb for gRPC service definitions.
	"subscription-service/worker/workflow" // Import workflow to use the SubscriptionParams struct.

	"go.temporal.io/sdk/client" // Import client to interact with Temporal service.
)

// server struct implements the SubscriptionServiceServer interface generated by gRPC.
type server struct {
	pb.UnimplementedSubscriptionServiceServer // Embedding for forward compatibility.
}

// NewServer creates and returns a new instance of SubscriptionServiceServer.
// This function is a constructor for the server struct.
func NewServer() pb.SubscriptionServiceServer {
	return &server{} // Return a new server instance.
}

// ProcessSubscription handles the subscription process for a user.
// It implements the SubscriptionServiceServer interface.
// This method takes a context and a SubscriptionRequest, and returns a SubscriptionResponse or an error.
func (s *server) ProcessSubscription(ctx context.Context, req *pb.SubscriptionRequest) (*pb.SubscriptionResponse, error) {
	// Prepare the parameters for the workflow based on the request.
	param := workflow.SubscriptionParams{
		Email:       req.EmailId,            // User's email ID.
		Status:      req.SubscriptionStatus, // Subscription status (e.g., active, inactive).
		Type:        req.MailType,           // Type of mail (e.g., promotional, transactional).
		PlanName:    req.ProductName,        // Name of the subscription plan.
		VariantName: req.VariantName,        // Name of the plan variant.
	}

	// Define the workflow options for starting the workflow.
	workflowOptions := client.StartWorkflowOptions{
		ID:        "SubscriptionWorkflow" + param.Email, // Unique workflow ID using the user's email.
		TaskQueue: "subscription-service",               // Task queue name for worker matching.
	}

	// Execute the workflow with the prepared options and parameters.
	// The context is explicitly set to Background to avoid using the gRPC request context.
	// This is because the workflow may outlive the original request context.
	_, err := app.Temporal.ExecuteWorkflow(context.Background(), workflowOptions, "SubscriptionWorkflow", param)
	if err != nil {
		// Log the error and notify via a message queue if starting the workflow fails.
		fmt.Println(err) // Log the error to standard output.
		app.Producer.publishMessage("error", "Subscription-Service", "Failed to start WelcomeWorkflow: "+err.Error())
		// Return a response indicating failure.
		return &pb.SubscriptionResponse{Success: false, Message: err.Error()}, nil
	}

	// Return a successful response if the workflow was started without errors.
	return &pb.SubscriptionResponse{Success: true, Message: "Subscription successful"}, nil
}
